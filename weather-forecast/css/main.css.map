{"version":3,"sources":["_settings.scss","_base.scss","_variables.scss","../../node_modules/susy/sass/susy/output/support/_rem.scss","_header-main.scss","../../node_modules/susy/sass/susy/output/support/_clearfix.scss","_footer-main.scss","_w-forecast.scss","../../node_modules/susy/sass/susy/language/susy/_span.scss"],"names":[],"mappings":"AAAA,iEAEA,KACE,mCAAoC,CACrC,KCHC,yBACA,QAAS,CACV,GAGC,cACA,QAAS,CACV,GAGC,aACA,aCegB,CDdjB,EAGC,aCQgB,CDTlB,QAII,aCMc,CDLf,aEDC,eAAA,iBAAA,kBCjBF,WAAY,CCSV,mBACE,YACA,cACA,UAAW,CACZ,aFID,eAAA,iBAAA,kBGjBF,eACA,kBACA,aJiB+B,CGV7B,mBACE,YACA,cACA,UAAW,CACZ,YFID,eAAA,iBAAA,kBIjBF,SACA,SAAU,CFQR,kBACE,YACA,cACA,UAAW,CACZ,gBFID,gBAAA,WAAA,sBIZA,yBACA,qBACA,iBAAkB,CAJpB,6BJcE,gBAAA,YAAA,cKkFoB,CDxFnB,qBAID,aLWc,CKVf,iBJCC,cAAA,iBAAA,kBIGA,gBACA,kBACA,MACA,QAEA,cACA,iBAAkB,CFjBlB,uBACE,YACA,cACA,UAAW,CACZ,mBFID,WAAA,WAAA,cAAA,eIaE,aAAc,CAZlB,mCAgBI,YAAa,CACd,sBAGC,gBACA,gBAAiB,CAClB","file":"main.css","sourcesContent":["@import url('https://fonts.googleapis.com/css?family=Open+Sans');\n\nbody {\n  font-family: \"Open Sans\", sans-serif;\n}\n","body {\n  background-color: $color-t2-light;\n  margin: 0;\n}\n\nh1 {\n  color: $color-t3;\n  margin: 0;  \n}\n\nh2 {\n  margin-top: 0;\n  color: $color-t4;\n}\n\na {\n  color: $color-t1;\n\n  &:hover {\n    color: $color-t2;\n  }\n}\n","$susy: (\n  columns: 4,  // The number of columns in your grid\n  gutters: 1/4, // The size of a gutter in relation to a single column\n);\n\n$tablet-up: (\n  flow: ltr,\n  math: fluid,\n  output: float,\n  gutter-position: after,\n  container: auto,\n  container-position: center,\n  columns: 12,\n  gutters: .25,\n  column-width: false,\n  global-box-sizing: content-box,\n  last-flow: to\n);\n\n// colors\n$base-font-color: #000000;\n$base-font-color-lighter: #5d5d5d;\n\n// six tones palette\n$color-t1: #B6B054;\n$color-t2: #8DB34D;\n$color-t3: #49578A;\n$color-t4: #634F94;\n$color-t5: #B65A54;\n$color-t6: #B67354;\n\n// three color light tones\n$color-t2-light: #FDFEFC;\n$color-t4-light: #ECE9F4;\n$color-t6-light: #FFFFFF;\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n",".header-main {\n  @include container;\n  padding: 1em;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n",".footer-main {\n  @include container;\n  font-size: .9em;\n  text-align: center;\n  color: $base-font-color-lighter;\n}\n",".w-forecast {\n  @include container;\n  margin: 0;\n  padding: 0;\n  \n  &_day {\n    @include span(2 of 10);\n    background-color: $color-t4-light;\n    list-style-type: none;\n    position: relative;\n\n    &:nth-child(5) {\n      @include span(last 2 of 10);\n    }\n  }\n  \n  &_day-text {\n    color: $color-t5;\n  }\n\n  &_temp {\n    @include container(50%);\n    margin-top: .2em;\n    position: absolute;\n    top: 0;\n    right: 0;\n\n    color: $color-t6;\n    text-align: center;\n\n    > * {\n      @include span(2 of 2);\n      margin-left: 0;\n    }\n\n    > *:nth-child(2n + 1) {\n      display: none;\n    }\n\n    &--max {\n      font-size: 1.2em;\n      font-weight: bold;\n    }\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n"]}